##用户中心
做了近两年用户中心，目前在做其它的项目：

用户中心的压力相对其它业务项目来说，较为好处理

核心无非是三点：

一、多样化的单点登陆支持（核心

有OAuth,Jwt,和自有方案

推荐使用JWT标准+服务器额外校验实现登陆状态的控制，可有效降低认证服务器的压力

OAuth不多说了，业务常用的标准之一，也比成熟

自有方案也可以使用分布式的session，或session式令牌访问

二、用户管理支持（核心

需要划定业务边界，保证自己的业务领域不受其它业务领域的影响

缺点是，对其它接入系统，容易存在信息不一致的情况（如手机号作为登陆账号时，用户系统与业务系统保留的手机号不同），如果单使用ID则会造成业务系统体验差（看不到手机号）的问题，需要定制同步的系统解决一致性带来的问题。

我个人遇到的问题：

如业务系统需要给用户添加一个账号，怎么添加？你的后台是不是要整合到一个大后台里

A业务的管理人员和B业务的管理人员对同一个用户发生了管理冲突，怎么办？

A业务要求增加一个用户属性作为注册必要条件，B业务为了用户体验不允许，怎么办？

这里需要好好考虑自己的业务边界，避免被其它业务领域污染

三、用户运营能力的支持（非核心功能

PV,UV不用说，渠道统计，引流统计等预计也需要开发的，由于用户系统会成为其它所有业务系统的用户入口，需要帮助其它业务系统埋点统计一些用户信息，并且汇总到专门的数据系统方便后期用户数据与业务数据关联。

PS：作为一个被核心依赖的服务，需要考虑高可用的场景，根据CAP理论，可以侧重AP方向，适当降低一致性要求。

最后补充下2问题，2问题实际上不会那么严重，对于用户系统这种对数据严谨性不是很高的，不妨直接考虑分布式的数据库（HBase，MongoDB等），缓存该加的加，如果用户量接近亿级，可以利用一下一致性哈希原理根据UID将不同用户请求打到不同服务器上

ref: https://www.oschina.net/question/3786897_2274525